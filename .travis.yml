# Programming language definition
language: cpp

# Build matrix (OS, compiler)
matrix:
  include:
    - os: linux
      compiler: gcc
      env: OS=linux COMPILER=gcc GCC_VERSION=6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - cmake
            - doxygen
            - graphviz
            - binutils-dev
            - uuid-dev
    - os: linux
      compiler: clang
      env: OS=linux COMPILER=clang CLANG_VERSION=3.9
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9
          packages:
            - clang-3.9
            - libc++-dev
            - libc++abi-dev
            - cmake
            - doxygen
            - graphviz
            - binutils-dev
            - uuid-dev
    - os: osx
      compiler: clang
      env: OS=osx COMPILER=clang
      osx_image: xcode8.2

# Using Trusty environment
sudo: required
dist: trusty
group: edge

# Branches to build
branches:
  only:
    - master

# Clone depth
git:
  depth: 1

# Scripts that run before install
before_install:
  # cmake
  - if [ "$OS" == "linux" ]; then curl -sSL https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.sh -o install-cmake.sh; fi
  - if [ "$OS" == "linux" ]; then chmod +x install-cmake.sh; fi
  - if [ "$OS" == "linux" ]; then sudo ./install-cmake.sh --prefix=/usr/local --skip-license; fi
  - cmake --version
  # git
  - git config --global user.name "Travis CI"
  - git config --global user.email "travis@travis-ci.org"
  - git config --global push.default simple
  # gcc
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "gcc" ]; then export CC="gcc-${GCC_VERSION}" CXX="g++-${GCC_VERSION}"; fi
  # clang, libc++, libc++abi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then export CC="clang-${CLANG_VERSION}" CXX="clang++-${CLANG_VERSION}"; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then pushd .; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then git clone --depth=1 https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then git clone --depth=1 https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then mkdir llvm-build && cd llvm-build; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_INSTALL_PREFIX=/usr ../llvm-source; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then make cxx -j2; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then sudo make install-cxxabi install-cxx; fi
  - if [ "$OS" != "osx" ] && [ "$COMPILER" = "clang" ]; then popd; fi
  # doxygen
  - if [ "$OS" == "osx" ]; then brew install doxygen; fi
  # graphviz
  - if [ "$OS" == "osx" ]; then brew install graphviz; fi

# Build scripts
script: 
  - cd build
  - ./unix.sh

# Don't send notifications on success
notifications:
  email:
    on_success: never
